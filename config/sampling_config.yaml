# Sampling configuration for scripts/batch_rollout.py
#
# You can pass this file with:
#   python scripts/batch_rollout.py --config config/sampling_config.yaml \
#     --num-samples 2000 --input-data input_data.csv --time-range 2015 2035 --seed 123
#
# Notes:
# - Distributions supported: fixed, uniform, normal, lognormal, beta, choice
# - normal supports optional min/max with clip_to_bounds: true
# - lognormal uses parameters in log space: mu, sigma; supports min/max with clip_to_bounds
# - beta draws in [0,1] then scales to [min,max]
# - choice supports optional probabilities p

seed: 32432432
initial_progress: 0.0
# If omitted on CLI, this is used; otherwise CLI --time-range overrides
time_range: [2012.0, 2040.0]

num_rollouts: 5000
input_data: input_data.csv

parameters:
  # Elasticities and weights
  rho_cognitive:
    dist: normal
    mean: -2.0
    sd: 0.6
    # Alternatively, specify 80% CI via ci80_low/ci80_high instead of mean/sd
    # ci80_low: -2.8
    # ci80_high: -1.2
    min: -10.0
    max: 0.0
    clip_to_bounds: true
  rho_progress:
    dist: normal
    mean: -0.2
    sd: 0.25
    min: -1.0
    max: 0
    clip_to_bounds: true
  alpha:
    dist: beta
    alpha: 2.0
    beta: 2.0
    min: 0.05
    max: 0.95

  # Software scale / normalization
  software_scale:
    dist: lognormal
    mu: 0.80   # ~exp(0.80) ≈ 2.2
    sigma: 0.35
    # Alternatively, specify 80% CI in original units
    # ci80_low: 1.0
    # ci80_high: 5.0
    min: 0.1
    max: 10.0
    clip_to_bounds: true
  cognitive_output_normalization:
    dist: lognormal
    mu: -1.20  # ~exp(-1.20) ≈ 0.30
    sigma: 0.5
    min: 0.00001
    max: 10.0
    clip_to_bounds: true
  zeta:
    dist: beta
    alpha: 2.0
    beta: 2.0
    min: 0.1
    max: 1.0

  # Automation
  automation_fraction_at_superhuman_coder:
    dist: beta
    alpha: 3.0
    beta: 1.5
    min: 0.1
    max: 1.0
  swe_multiplier_at_anchor_time:
    dist: normal
    mean: 1.05
    sd: 0.2
    min: 1.0
    max: 10.0
    clip_to_bounds: true

  # Research taste dynamics
  ai_research_taste_at_superhuman_coder_sd:
    dist: normal
    mean: 0.0
    sd: 3.0
    min: -10.0
    max: 23.0
    clip_to_bounds: true
  ai_research_taste_slope:
    dist: lognormal
    mu: 0.69  # ~2.0
    sigma: 0.5
    min: 0.1
    max: 10.0
    clip_to_bounds: true
  taste_schedule_type:
    dist: choice
    values: ["SDs per effective OOM", "SDs per progress-year"]
    p: [0.7, 0.3]

  # Superhuman coder time horizon + extrapolation
  sc_time_horizon_minutes:
    dist: lognormal
    mu: 11.73  # ~124560 minutes
    sigma: 1.0
    min: 1000.0
    max: 100000000000.0
    clip_to_bounds: true
  horizon_extrapolation_type:
    dist: choice
    values: ["exponential", "decaying doubling time"]
    p: [0.25, 0.75]

  # Manual horizon fitting (used when horizon_extrapolation_type="decaying doubling time")
  anchor_time:
    dist: normal
    mean: 2025.25
    sd: 0
    min: 2025.0
    max: 2026.0
    clip_to_bounds: true
  anchor_horizon:
    dist: normal
    mean: 15.0
    sd: 0
    min: 0.01
    max: 100.0
    clip_to_bounds: true
  anchor_doubling_time:
    dist: lognormal
    mu: -0.776  # ~0.46
    sigma: 0.3
    min: 0.01
    max: 2.0
    clip_to_bounds: true
  doubling_decay_rate:
    dist: lognormal
    mu: -2.996  # ~0.05
    sigma: 0.5
    min: 0.001
    max: 0.5
    clip_to_bounds: true

  # Baseline annual compute multiplier
  baseline_annual_compute_multiplier:
    dist: lognormal
    mu: 1.504  # ~4.5
    sigma: 0.4
    min: 1.0
    max: 20.0
    clip_to_bounds: true

  # CES lambda transformation
  lambda:
    dist: beta
    alpha: 2.0
    beta: 5.0
    min: 0.0
    max: 2.0
